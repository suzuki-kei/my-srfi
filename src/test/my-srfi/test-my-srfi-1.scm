(use my-srfi.1)
(use gauche.test)

(define main
    (lambda (arguments)
        (test-my-srfi-1)))

(define test-my-srfi-1
    (lambda ()
        (test-list)
        (test-xcons)
        (test-cons*)
        (test-make-list)
        (test-list-tabulate)
        (test-list-copy)
        (test-iota)
        (test-reverse)
        (test-first)
        (test-second)
        (test-third)
        (test-fourth)
        (test-fifth)
        (test-sixth)
        (test-seventh)
        (test-eighth)
        (test-ninth)
        (test-tenth)
        (test-take)
        (test-drop)
        (test-take-right)))

(define test-list
    (lambda ()
        (test-start "list")
        (test* "list" '() (list))
        (test* "list" '(1) (list 1))
        (test* "list" '(1 2) (list 1 2))
        (test* "list" '(1 2 3) (list 1 2 3))
        (test-end)))

(define test-xcons
    (lambda ()
        (test-start "xcons")
        (test* "xcons" '(1) (xcons '() 1))
        (test* "xcons" '(1 2) (xcons '(2) 1))
        (test* "xcons" '(1 2 3) (xcons '(2 3) 1))
        (test-end)))

(define test-cons*
    (lambda ()
        (test-start "cons*")
        (test* "cons*" (test-error <error>) (cons*))
        (test* "cons*" 1 (cons* 1))
        (test* "cons*" '(1 . 2) (cons* 1 2))
        (test* "cons*" '(1 2 . 3) (cons* 1 2 3))
        (test* "cons*" '(1 2 3) (cons* 1 2 3 '()))
        (test-end)))

(define test-make-list
    (lambda ()
        (test-start "make-list")
        (test* "make-list" (test-error <error>) (make-list -1))
        (test* "make-list" '() (make-list 0))
        (test* "make-list" '(#f) (make-list 1))
        (test* "make-list" '(#f #f) (make-list 2))
        (test* "make-list" '(#f #f #f) (make-list 3))
        (test* "make-list" '() (make-list 0 'a))
        (test* "make-list" '(a) (make-list 1 'a))
        (test* "make-list" '(a a) (make-list 2 'a))
        (test* "make-list" '(a a a) (make-list 3 'a))
        (test-end)))

(define test-list-tabulate
    (lambda ()
        (test-start "list-tabulate")
        (test* "list-tabulate" (test-error <error>) (list-tabulate -1 values))
        (test* "list-tabulate" '() (list-tabulate 0 values))
        (test* "list-tabulate" '(0) (list-tabulate 1 values))
        (test* "list-tabulate" '(0 1) (list-tabulate 2 values))
        (test* "list-tabulate" '(0 1 2) (list-tabulate 3 values))
        (test-end)))

(define test-list-copy
    (lambda ()
        (test-start "list-copy")
        (test* "list-copy" '() (list-copy '()))
        (test* "list-copy" '(1) (list-copy '(1)))
        (test* "list-copy" '(1 2) (list-copy '(1 2)))
        (test* "list-copy" '(1 2 3) (list-copy '(1 2 3)))
        (test-end)))

(define test-iota
    (lambda ()
        (test-start "iota")
        (test* "iota" '() (iota 0))
        (test* "iota" '(0) (iota 1))
        (test* "iota" '(0 1) (iota 2))
        (test* "iota" '(0 1 2) (iota 3))
        (test* "iota" '() (iota 0 1))
        (test* "iota" '(1) (iota 1 1))
        (test* "iota" '(1 2) (iota 2 1))
        (test* "iota" '(1 2 3) (iota 3 1))
        (test* "iota" '() (iota 0 1 2))
        (test* "iota" '(0) (iota 1 0 2))
        (test* "iota" '(0 2) (iota 2 0 2))
        (test* "iota" '(0 2 4) (iota 3 0 2))
        (test* "iota" '() (iota 0 0 -1))
        (test* "iota" '(0) (iota 1 0 -1))
        (test* "iota" '(0 -1) (iota 2 0 -1))
        (test* "iota" '(0 -1 -2) (iota 3 0 -1))
        (test-end)))

(define test-reverse
    (lambda ()
        (test-start "reverse")
        (test* "reverse" '() (reverse '()))
        (test* "reverse" '(1) (reverse '(1)))
        (test* "reverse" '(2 1) (reverse '(1 2)))
        (test* "reverse" '(3 2 1) (reverse '(1 2 3)))
        (test* "reverse" '((e (f)) d (b c) a) (reverse '(a (b c) d (e (f)))))
        (test-end)))

(define test-first
    (lambda ()
        (test-start "first")
        (test* "first" (test-error <error>) (first '()))
        (test* "first" 1 (first '(1)))
        (test* "first" 1 (first '(1 2)))
        (test* "first" 1 (first '(1 2 3)))
        (test* "first" 1 (first '(1 . 2)))
        (test-end)))

(define test-second
    (lambda ()
        (test-start "second")
        (test* "second" (test-error <error>) (second '()))
        (test* "second" (test-error <error>) (second '(1)))
        (test* "second" 2 (second '(1 2)))
        (test* "second" 2 (second '(1 2 3)))
        (test* "second" (test-error <error>) (second '(1 . 2)))
        (test* "second" 2 (second '(1 2 . 3)))
        (test-end)))

(define test-third
    (lambda ()
        (test-start "third")
        (test* "third" (test-error <error>) (third '()))
        (test* "third" (test-error <error>) (third '(1)))
        (test* "third" (test-error <error>) (third '(1 2)))
        (test* "third" 3 (third '(1 2 3)))
        (test* "third" 3 (third '(1 2 3 4)))
        (test* "third" (test-error <error>) (third '(1 2 . 3)))
        (test* "third" 3 (third '(1 2 3 . 4)))
        (test-end)))

(define test-fourth
    (lambda ()
        (test-start "fourth")
        (test* "fourth" (test-error <error>) (fourth '()))
        (test* "fourth" (test-error <error>) (fourth '(1)))
        (test* "fourth" (test-error <error>) (fourth '(1 2)))
        (test* "fourth" (test-error <error>) (fourth '(1 2 3)))
        (test* "fourth" 4 (fourth '(1 2 3 4)))
        (test* "fourth" 4 (fourth '(1 2 3 4 5)))
        (test* "fourth" (test-error <error>) (fourth '(1 2 3 . 4)))
        (test* "fourth" 4 (fourth '(1 2 3 4 . 5)))
        (test-end)))

(define test-fifth
    (lambda ()
        (test-start "fifth")
        (test* "fifth" (test-error <error>) (fifth '()))
        (test* "fifth" (test-error <error>) (fifth '(1)))
        (test* "fifth" (test-error <error>) (fifth '(1 2)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3 4)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5 6)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3 4 . 5)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5 6)))
        (test-end)))

(define test-sixth
    (lambda ()
        (test-start "sixth")
        (test* "sixth" (test-error <error>) (sixth '()))
        (test* "sixth" (test-error <error>) (sixth '(1)))
        (test* "sixth" (test-error <error>) (sixth '(1 2)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4 5)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6 7)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4 5 . 6)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6 . 7)))
        (test-end)))

(define test-seventh
    (lambda ()
        (test-start "seventh")
        (test* "seventh" (test-error <error>) (seventh '()))
        (test* "seventh" (test-error <error>) (seventh '(1)))
        (test* "seventh" (test-error <error>) (seventh '(1 2)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5 6)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7 8)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5 6 . 7)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7 . 8)))
        (test-end)))

(define test-eighth
    (lambda ()
        (test-start "eighth")
        (test* "eighth" (test-error <error>) (eighth '()))
        (test* "eighth" (test-error <error>) (eighth '(1)))
        (test* "eighth" (test-error <error>) (eighth '(1 2)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6 7)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8 9)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6 7 . 8)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8 . 9)))
        (test-end)))

(define test-ninth
    (lambda ()
        (test-start "ninth")
        (test* "ninth" (test-error <error>) (ninth '()))
        (test* "ninth" (test-error <error>) (ninth '(1)))
        (test* "ninth" (test-error <error>) (ninth '(1 2)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7 8)))
        (test* "ninth" 9 (ninth '(1 2 3 4 5 6 7 8 9)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7 8 . 9)))
        (test* "ninth" 9 (ninth '(1 2 3 4 5 6 7 8 9 . 10)))
        (test-end)))

(define test-tenth
    (lambda ()
        (test-start "tenth")
        (test* "tenth" (test-error <error>) (tenth '()))
        (test* "tenth" (test-error <error>) (tenth '(1)))
        (test* "tenth" (test-error <error>) (tenth '(1 2)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5 6)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5 6 7)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5 6 7 8)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5 6 7 8 9)))
        (test* "tenth" 10 (tenth '(1 2 3 4 5 6 7 8 9 10)))
        (test* "tenth" 10 (tenth '(1 2 3 4 5 6 7 8 9 10 11)))
        (test* "tenth" (test-error <error>) (tenth '(1 2 3 4 5 6 7 8 9 . 10)))
        (test* "tenth" 10 (tenth '(1 2 3 4 5 6 7 8 9 10 . 11)))
        (test-end)))

(define test-take
    (lambda ()
        (test-start "take")
        (test* "take" (test-error <error>) (take '() -1))
        (test* "take" '() (take '() 0))
        (test* "take" (test-error <error>) (take '() 1))
        (test* "take" (test-error <error>) (take '(1 2 3) -1))
        (test* "take" '() (take '(1 2 3) 0))
        (test* "take" '(1) (take '(1 2 3) 1))
        (test* "take" '(1 2) (take '(1 2 3) 2))
        (test* "take" '(1 2 3) (take '(1 2 3) 3))
        (test* "take" (test-error <error>) (take '(1 2 3) 4))
        (test-end)))

(define test-drop
    (lambda ()
        (test-start "drop")
        (test* "drop" (test-error <error>) (drop '() -1))
        (test* "drop" '() (drop '() 0))
        (test* "drop" (test-error <error>) (drop '() 1))
        (test* "drop" (test-error <error>) (drop '(1 2 3) -1))
        (test* "drop" '(1 2 3) (drop '(1 2 3) 0))
        (test* "drop" '(2 3) (drop '(1 2 3) 1))
        (test* "drop" '(3) (drop '(1 2 3) 2))
        (test* "drop" '() (drop '(1 2 3) 3))
        (test* "drop" (test-error <error>) (drop '(1 2 3) 4))
        (test-end)))

(define test-take-right
    (lambda ()
        (test-start "take-right")
        (test* "take-right" (test-error <error>) (take-right '() -1))
        (test* "take-right" '() (take-right '() 0))
        (test* "take-right" (test-error <error>) (take-right '() 1))
        (test* "take-right" '() (take-right '(1 2 3) 0))
        (test* "take-right" '(3) (take-right '(1 2 3) 1))
        (test* "take-right" '(2 3) (take-right '(1 2 3) 2))
        (test* "take-right" '(1 2 3) (take-right '(1 2 3) 3))
        (test* "take-right" (test-error <error>) (take-right '(1 2 3) 4))
        (test-end)))

