(use my-srfi.1)
(use gauche.test)

(define main
    (lambda (arguments)
        (test-my-srfi-1)))

(define test-my-srfi-1
    (lambda ()
        (test-first)
        (test-second)
        (test-third)
        (test-fourth)
        (test-fifth)
        (test-sixth)
        (test-seventh)
        (test-eighth)
        (test-ninth)))

(define test-first
    (lambda ()
        (test-start "first")
        (test* "first" (test-error <error>) (first '()))
        (test* "first" 1 (first '(1)))
        (test* "first" 1 (first '(1 2)))
        (test* "first" 1 (first '(1 2 3)))
        (test* "first" 1 (first '(1 . 2)))
        (test-end)))

(define test-second
    (lambda ()
        (test-start "second")
        (test* "second" (test-error <error>) (second '()))
        (test* "second" (test-error <error>) (second '(1)))
        (test* "second" 2 (second '(1 2)))
        (test* "second" 2 (second '(1 2 3)))
        (test* "second" (test-error <error>) (second '(1 . 2)))
        (test* "second" 2 (second '(1 2 . 3)))
        (test-end)))

(define test-third
    (lambda ()
        (test-start "third")
        (test* "third" (test-error <error>) (third '()))
        (test* "third" (test-error <error>) (third '(1)))
        (test* "third" (test-error <error>) (third '(1 2)))
        (test* "third" 3 (third '(1 2 3)))
        (test* "third" 3 (third '(1 2 3 4)))
        (test* "third" (test-error <error>) (third '(1 2 . 3)))
        (test* "third" 3 (third '(1 2 3 . 4)))
        (test-end)))

(define test-fourth
    (lambda ()
        (test-start "fourth")
        (test* "fourth" (test-error <error>) (fourth '()))
        (test* "fourth" (test-error <error>) (fourth '(1)))
        (test* "fourth" (test-error <error>) (fourth '(1 2)))
        (test* "fourth" (test-error <error>) (fourth '(1 2 3)))
        (test* "fourth" 4 (fourth '(1 2 3 4)))
        (test* "fourth" 4 (fourth '(1 2 3 4 5)))
        (test* "fourth" (test-error <error>) (fourth '(1 2 3 . 4)))
        (test* "fourth" 4 (fourth '(1 2 3 4 . 5)))
        (test-end)))

(define test-fifth
    (lambda ()
        (test-start "fifth")
        (test* "fifth" (test-error <error>) (fifth '()))
        (test* "fifth" (test-error <error>) (fifth '(1)))
        (test* "fifth" (test-error <error>) (fifth '(1 2)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3 4)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5 6)))
        (test* "fifth" (test-error <error>) (fifth '(1 2 3 4 . 5)))
        (test* "fifth" 5 (fifth '(1 2 3 4 5 6)))
        (test-end)))

(define test-sixth
    (lambda ()
        (test-start "sixth")
        (test* "sixth" (test-error <error>) (sixth '()))
        (test* "sixth" (test-error <error>) (sixth '(1)))
        (test* "sixth" (test-error <error>) (sixth '(1 2)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4 5)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6 7)))
        (test* "sixth" (test-error <error>) (sixth '(1 2 3 4 5 . 6)))
        (test* "sixth" 6 (sixth '(1 2 3 4 5 6 . 7)))
        (test-end)))

(define test-seventh
    (lambda ()
        (test-start "seventh")
        (test* "seventh" (test-error <error>) (seventh '()))
        (test* "seventh" (test-error <error>) (seventh '(1)))
        (test* "seventh" (test-error <error>) (seventh '(1 2)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5 6)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7 8)))
        (test* "seventh" (test-error <error>) (seventh '(1 2 3 4 5 6 . 7)))
        (test* "seventh" 7 (seventh '(1 2 3 4 5 6 7 . 8)))
        (test-end)))

(define test-eighth
    (lambda ()
        (test-start "eighth")
        (test* "eighth" (test-error <error>) (eighth '()))
        (test* "eighth" (test-error <error>) (eighth '(1)))
        (test* "eighth" (test-error <error>) (eighth '(1 2)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6 7)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8 9)))
        (test* "eighth" (test-error <error>) (eighth '(1 2 3 4 5 6 7 . 8)))
        (test* "eighth" 8 (eighth '(1 2 3 4 5 6 7 8 . 9)))
        (test-end)))

(define test-ninth
    (lambda ()
        (test-start "ninth")
        (test* "ninth" (test-error <error>) (ninth '()))
        (test* "ninth" (test-error <error>) (ninth '(1)))
        (test* "ninth" (test-error <error>) (ninth '(1 2)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7 8)))
        (test* "ninth" 9 (ninth '(1 2 3 4 5 6 7 8 9)))
        (test* "ninth" (test-error <error>) (ninth '(1 2 3 4 5 6 7 8 . 9)))
        (test* "ninth" 9 (ninth '(1 2 3 4 5 6 7 8 9 . 10)))
        (test-end)))

